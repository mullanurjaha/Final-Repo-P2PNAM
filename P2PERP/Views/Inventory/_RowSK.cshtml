<div class="d-flex justify-content-between align-items-center mb-3">

    <div class="flex-grow-1 text-center">
        <h4 class="mb-0 text-primary">Row List</h4>
    </div>

    <button class="btn btn-success" id="btnAddrow">
        <i class="bi bi-plus-circle"></i> Add Row
    </button>

</div>

<!-- Responsive wrapper -->
<div class="table-responsive">
    <table id="rowTable" class="table table-bordered table-hover align-middle w-100">
        <thead class="table-dark text-center">
            <tr>
                <th><input type="checkbox" id="selectAll"></th>
                <th>Sr.No.</th>
                <th>Row ID</th>
                <th>Row Code</th>
                <th>Row Name</th>
                <th>Rack Name</th>
                <th>Section Name</th>
                <th>Warehouse Name</th>
                <th>Added Date</th>
                <th>Added By</th>

                <th>Description</th>

                <th>Action</th>
            </tr>
        </thead>
        <tbody class="text-center"></tbody>
    </table>
</div>

<!-- Add/Edit Row Modal -->
<div class="modal fade" id="rowModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white position-relative">
                <h5 class="modal-title text-white w-100 text-center" id="rowModalLabel">Add Row</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="rowForm" class="row g-3">
                    <input type="hidden" id="RowId" name="RowId" />

                    <!-- Row Code -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-barcode-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="RowCode" name="RowCode" required readonly>
                                <label for="RowCode">Row Code</label>
                            </div>
                        </div>
                    </div>

                    <!-- Row Name -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-archive-drawer-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="RowName" name="RowName" required>
                                <label for="RowName">Row Name</label>
                            </div>
                        </div>
                    </div>

                    <!-- Warehouse -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-building-4-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <select class="form-select" id="warehouseDropdown" name="WarehouseId" required>
                                    <option value="">-- Select Warehouse --</option>
                                </select>
                                <label for="WarehouseDropdown">Warehouse</label>
                            </div>
                        </div>
                    </div>

                    <!-- Section -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-layout-masonry-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <select class="form-select" id="sectionDropdown" name="SectionId" required>
                                    <option value="">-- Select Section --</option>
                                </select>
                                <label for="SectionDropdown">Section</label>
                            </div>
                        </div>
                    </div>

                    <!-- Rack -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-stack-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <select class="form-select" id="rackDropdown" name="RackId" required>
                                    <option value="">-- Select Rack --</option>
                                </select>
                                <label for="RackDropdown">Rack</label>
                            </div>
                        </div>
                    </div>

                    <!-- Description -->
                    <div class="col-12">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-file-text-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <textarea class="form-control" id="Descriptions" name="Description" rows="3"></textarea>
                                <label for="Descriptions">Description</label>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-danger bg-danger text-white px-4" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-2"></i>Close
                </button>
                <button type="submit" form="rowForm" class="btn btn-success px-4" id="saveRow">
                    <i class="bi bi-check-circle me-2 text-white"></i>Save
                </button>
            </div>
        </div>
    </div>
</div>


<!-- View Row Modal -->
<div class="modal fade" id="viewRowModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">

            <!-- Header -->
            <div class="modal-header bg-primary text-white position-relative">
                <h5 class="d-flex justify-content-center text-center ms-auto text-white">
                    Row Details
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>

            <!-- Body -->
            <div class="modal-body">
                <form class="row g-3">

                    <!-- Row Code -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-barcode-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vRowCode" readonly>
                                <label for="vRowCode">Row Code</label>
                            </div>
                        </div>
                    </div>

                    <!-- Row Name -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-list-check-2"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vRowName" readonly>
                                <label for="vRowName">Row Name</label>
                            </div>
                        </div>
                    </div>

                    <!-- Warehouse Name -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-building-4-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vWarehouseName" readonly>
                                <label for="vWarehouseName">Warehouse Name</label>
                            </div>
                        </div>
                    </div>

                    <!-- Section Name -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-layout-masonry-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vSectionName" readonly>
                                <label for="vSectionName">Section Name</label>
                            </div>
                        </div>
                    </div>

                    <!-- Rack Name -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-archive-drawer-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vRackName" readonly>
                                <label for="vRackName">Rack Name</label>
                            </div>
                        </div>
                    </div>



                    <!-- Description -->
                    <div class="col-12">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-file-text-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <textarea class="form-control" id="vDescription" rows="2" readonly></textarea>
                                <label for="vDescription">Description</label>
                            </div>
                        </div>
                    </div>

                    <!-- Added Date -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-calendar-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vAddedDate" readonly>
                                <label for="vAddedDate">Added Date</label>
                            </div>
                        </div>
                    </div>

                    <!-- Added By -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-user-3-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vAddedBy" readonly>
                                <label for="vAddedBy">Added By</label>
                            </div>
                        </div>
                    </div>

                </form>
            </div>


        </div>
    </div>
</div>



<script>
    let selectedRowIds = new Set();

    $(document).ready(function () {
        // ✅ Initialize DataTable
        $('#rowTable').DataTable({
            processing: true,
            serverSide: false,
            ajax: {
                url: "/Inventory/RowsSKK",
                type: 'GET',
                dataSrc: 'data'
            },
            dom: '<"d-flex justify-content-between align-items-center mt-1 mb-2"Bf>rt<"d-flex justify-content-between mt-2"<"datatable-info"i><"datatable-pagination"p>>',
            buttons: [
                // --- Print ---
                {
                    extend: 'print',
                    text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                    title: '',
                    exportOptions: {
                        columns: ':visible:not(:first-child):not(:last-child)',
                        rows: function (idx, data, node) {
                            return selectedRowIds.has(data.RowId.toString());
                        }
                    },
                    action: function (e, dt, button, config) {
                        if (selectedRowIds.size === 0) {
                            toastr.warning("Please select at least one row before printing.", "No Selection");
                            return;
                        }
                        $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                    },
                    customize: function (win) {
                        let serialNumber = 1;
                        $(win.document.body).find('table tbody tr').each(function() {
                            $(this).find('td:eq(0)').text(serialNumber++);
                        });

                        $(win.document.body).prepend(
                            '<h2 style="text-align: center; margin-bottom: 10px;">Row List</h2>' +
                            '<p style="text-align: center; margin-bottom: 20px; color: #666;">Generated on: ' + new Date().toLocaleDateString("en-GB") + '</p>' +
                            '<hr style="margin-bottom: 20px;">'
                        );

                        $(win.document.body).find('table')
                            .css('border', '1px solid black')
                            .css('border-collapse', 'collapse')
                            .find('th, td')
                            .css('border', '1px solid black')
                            .css('padding', '5px');

                        $(win.document.body).find('th')
                            .css('background-color', 'black')
                            .css('color', 'white');
                    }
                },

                // --- PDF ---
                {
                    extend: 'pdfHtml5',
                    text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                    title: '',
                    exportOptions: {
                        columns: ':visible:not(:first-child):not(:last-child)',
                        rows: function (idx, data, node) {
                            return selectedRowIds.has(data.RowId.toString());
                        }
                    },
                    action: function (e, dt, button, config) {
                        if (selectedRowIds.size === 0) {
                            toastr.warning("Please select at least one row before exporting PDF.", "No Selection");
                            return;
                        }
                        $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                    },
                    customize: function (doc) {
                        let selectedData = [];
                        $('#rowTable').DataTable().rows().every(function() {
                            let rowData = this.data();
                            if (selectedRowIds.has(rowData.RowId.toString())) {
                                selectedData.push(rowData);
                            }
                        });

                        doc.content = [];

                        doc.content.push(
                            {
                                text: 'Row List',
                                alignment: 'center',
                                fontSize: 16,
                                bold: true,
                                margin: [0, 0, 0, 10]
                            },
                            {
                                text: 'Generated on: ' + new Date().toLocaleDateString("en-GB"),
                                alignment: 'center',
                                fontSize: 10,
                                color: '#666',
                                margin: [0, 0, 0, 15]
                            }
                        );

                        let tableBody = [];

                        tableBody.push([
                            { text: 'Sr No', style: 'tableHeader', alignment: 'center' },
                            { text: 'Row Code', style: 'tableHeader', alignment: 'center' },
                            { text: 'Row Name', style: 'tableHeader', alignment: 'center' },
                            { text: 'Rack Name', style: 'tableHeader', alignment: 'center' },
                            { text: 'Section Name', style: 'tableHeader', alignment: 'center' },
                            { text: 'Warehouse Name', style: 'tableHeader', alignment: 'center' },
                            { text: 'Added Date', style: 'tableHeader', alignment: 'center' },
                            { text: 'Added By', style: 'tableHeader', alignment: 'center' },
                            { text: 'Description', style: 'tableHeader', alignment: 'center' }
                        ]);

                        selectedData.forEach(function(row, index) {
                            let addedDate = "";
                            if (row.AddedDate) {
                                let match = /Date\((\d+)\)/.exec(row.AddedDate);
                                if (match) {
                                    let dt = new Date(parseInt(match[1], 10));
                                    addedDate = dt.toLocaleDateString("en-GB");
                                } else {
                                    let dt2 = new Date(row.AddedDate);
                                    if (!isNaN(dt2.getTime())) {
                                        addedDate = dt2.toLocaleDateString("en-GB");
                                    }
                                }
                            }

                            tableBody.push([
                                { text: (index + 1).toString(), alignment: 'center', fontSize: 9 },
                                { text: row.RowCode || '-', alignment: 'center', fontSize: 9 },
                                { text: row.RowName || '-', alignment: 'center', fontSize: 9 },
                                { text: row.RackName || '-', alignment: 'center', fontSize: 9 },
                                { text: row.SectionName || '-', alignment: 'center', fontSize: 9 },
                                { text: row.WarehouseName || '-', alignment: 'center', fontSize: 9 },
                                { text: addedDate || '-', alignment: 'center', fontSize: 9 },
                                { text: row.AddedBy || '-', alignment: 'center', fontSize: 9 },
                                { text: row.Description || '-', alignment: 'center', fontSize: 9 }
                            ]);
                        });

                        doc.content.push({
                            table: {
                                headerRows: 1,
                                widths: ['8%', '12%', '12%', '12%', '12%', '12%', '10%', '10%', '12%'],
                                body: tableBody
                            },
                            layout: {
                                hLineWidth: function(i, node) { return 0.5; },
                                vLineWidth: function(i, node) { return 0.5; },
                                hLineColor: function(i, node) { return '#000000'; },
                                vLineColor: function(i, node) { return '#000000'; },
                                paddingLeft: function(i, node) { return 5; },
                                paddingRight: function(i, node) { return 5; }
                            }
                        });

                        doc.styles = {
                            tableHeader: {
                                bold: true,
                                fontSize: 10,
                                color: 'white',
                                fillColor: '#000000',
                                alignment: 'center'
                            }
                        };

                        doc.defaultStyle = {
                            fontSize: 9,
                            alignment: 'center'
                        };
                    }
                },

                // --- Excel ---
                {
                    extend: 'excelHtml5',
                    text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                    title: 'Row List',
                    message: 'Generated on: ' + new Date().toLocaleDateString("en-GB"),
                    exportOptions: {
                        columns: ':visible:not(:first-child):not(:last-child)',
                        rows: function (idx, data, node) {
                            return selectedRowIds.has(data.RowId.toString());
                        }
                    },
                    action: function (e, dt, button, config) {
                        if (selectedRowIds.size === 0) {
                            toastr.warning("Please select at least one row before exporting Excel.", "No Selection");
                            return;
                        }
                        $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                    }
                },

                // --- CSV ---
                {
                    extend: 'csvHtml5',
                    text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                    title: 'Row List',
                    message: 'Generated on: ' + new Date().toLocaleDateString("en-GB"),
                    exportOptions: {
                        columns: ':visible:not(:first-child):not(:last-child)',
                        rows: function (idx, data, node) {
                            return selectedRowIds.has(data.RowId.toString());
                        }
                    },
                    action: function (e, dt, button, config) {
                        if (selectedRowIds.size === 0) {
                            toastr.warning("Please select at least one row before exporting CSV.", "No Selection");
                            return;
                        }
                        $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                    }
                }
            ],
            columns: [
                {
                    data: null,
                    render: function (data, type, row) {
                        return `<input type="checkbox" class="rowCheckbox" value="${row.RowId}" />`;
                    },
                    orderable: false
                },
                {
                    "data": null,
                    "render": function (data, type, row, meta) {
                        return meta.row + 1;
                    },
                    "orderable": false
                },
                { data: "RowId", visible: false },
                { data: "RowCode" },
                { data: "RowName" },
                { data: "RackName" },
                { data: "SectionName" },
                { data: "WarehouseName" },
                {
                    "data": "AddedDate",
                    "render": function (data) {
                        if (!data) return "";
                        var match = /Date\((\d+)\)/.exec(data);
                        if (match) {
                            var dt = new Date(parseInt(match[1], 10));
                            return dt.toLocaleDateString("en-GB");
                        }
                        var dt2 = new Date(data);
                        if (!isNaN(dt2.getTime())) {
                            return dt2.toLocaleDateString("en-GB");
                        }
                        return data;
                    }
                },
                { data: "AddedBy" },
                {
                    data: "Description",
                    render: function (data, type, row) {
                        if (!data) return "-";
                        let shortText = data.length > 30 ? data.substring(0, 30) + "..." : data;
                        return `
            <span data-bs-toggle="tooltip" data-bs-placement="top" title="${data.replace(/"/g, '&quot;')}">
                ${shortText}
            </span>
        `;
                    }
                },
                {
                    data: null,
                    render: function (data, type, row) {
                        return `
                       <div class="d-flex justify-content-center gap-1">
            <button class="btn btn-sm btn-primary viewRow" data-id="${row.RowId}"
                data-bs-toggle="tooltip" data-bs-placement="top" title="View Row Details">
                <i class="bi bi-eye"></i>
            </button>

            <button class="btn btn-sm btn-warning editRow" data-id="${row.RowId}"
                data-bs-toggle="tooltip" data-bs-placement="top" title="Edit Row">
                <i class="bi bi-pencil-square"></i>
            </button>

            <button class="btn btn-sm btn-danger deleteRow" data-id="${row.RowId}"
                data-bs-toggle="tooltip" data-bs-placement="top" title="Delete Row">
                <i class="bi bi-trash"></i>
            </button>
        </div>
                        `;
                    },
                    orderable: false
                }
            ],
            columnDefs: [
                { orderable: false, targets: "_all" }
            ],
        });

        $("#rowTable_wrapper").prepend(`
  <div class="input-group mb-2 mt-3" style="max-width: 280px;">
    <span class="input-group-text bg-primary text-white">
      <i class="bi bi-calendar-date"></i>
    </span>
    <input type="text" id="rowDateRange" class="form-control" placeholder="Select date range" readonly />
  </div>
`);

        $('#rowDateRange').daterangepicker({
            autoUpdateInput: false,
            locale: {
                cancelLabel: 'Clear',
                format: 'YYYY-MM-DD'
            },
            opens: 'left',
            ranges: {
                'Today': [moment(), moment()],
                'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                'This Month': [moment().startOf('month'), moment().endOf('month')],
                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
            }
        });

        $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
            if (settings.nTable.id !== "rowTable") return true;

            var dateRange = $('#rowDateRange').val();
            if (!dateRange) return true;

            var minMax = dateRange.split(' to ');
            var min = moment(minMax[0], 'YYYY-MM-DD');
            var max = moment(minMax[1], 'YYYY-MM-DD');

            var date = moment(data[8], 'DD/MM/YYYY');
            if (!date.isValid()) return true;

            return date.isBetween(min, max, 'day', '[]');
        });

        $('#rowDateRange').on('apply.daterangepicker', function (ev, picker) {
            $(this).val(picker.startDate.format('YYYY-MM-DD') + ' to ' + picker.endDate.format('YYYY-MM-DD'));
            $('#rowTable').DataTable().draw();
        });

        $('#rowDateRange').on('cancel.daterangepicker', function (ev, picker) {
            $(this).val('');
            $('#rowTable').DataTable().draw();
        });

        $(document).on("click", "#btnAddrow", function () {
            $("#rowModal").modal("show");
            loadWarehouses();

            $.get("/Inventory/GetNextRowCodeSKK", function (res) {
                if (res && res.RnextCode) {
                    $('#RowCode').val(res.RnextCode);
                } else {
                    Swal.fire("Error", "Next row code not found", "error");
                }
            });

            $("#sectionDropdown").empty().append('<option value="">-- Select Section --</option>');
            $("#rackDropdown").empty().append('<option value="">-- Select Rack --</option>');
        });

        $('#rowForm').on('submit', function (e) {
            e.preventDefault();

            var formData = {
                RowId: $('#RowId').val() || 0,
                RowCode: $('#RowCode').val(),
                RowName: $('#rowName').val(),
                WarehouseCode: $('#warehouseDropdown').val(),
                SectionCode: $('#sectionDropdown').val(),
                RackCode: $('#rackDropdown').val(),
                Description: $('#Descriptions').val() || ""
            };

            $.ajax({
                url: "/Inventory/SaveRowSBK",
                type: "POST",
                data: formData,
                success: function (res) {
                    if (res.success) {
                        $('#rowModal').modal('hide');
                        $('#rowTable').DataTable().ajax.reload();

                        Swal.fire({
                            title: "Success",
                            text: "Row saved successfully!",
                            icon: "success",
                            timer: 2000,
                            showConfirmButton: false
                        });
                    } else {
                        Swal.fire({
                            title: "Error",
                            text: res.message || "Something went wrong",
                            icon: "error",
                            timer: 2500,
                            showConfirmButton: false
                        });
                    }
                },
                error: function () {
                    Swal.fire({
                        title: "Error",
                        text: "Server error while saving row.",
                        icon: "error",
                        timer: 2500,
                        showConfirmButton: false
                    });
                }
            });
        });

        $(document).on("click", ".viewRow", function () {
            var rowId = $(this).data("id");

            $.ajax({
                url: "/Inventory/GetRowByIdSSK",
                type: "GET",
                data: { rowId: rowId },
                success: function (res) {
                    if (res) {
                        $("#vRowId").val(res.RowId);
                        $("#vRowCode").val(res.RowCode);
                        $("#vRowName").val(res.RowName);
                        $("#vRackName").val(res.RackName);
                        $("#vSectionName").val(res.SectionName);
                        $("#vWarehouseName").val(res.WarehouseName);
                        $("#vDescription").val(res.Description || "-");
                        $("#vAddedBy").val(res.AddedBy);

                        let rowDate = res.AddedDate;
                        let timestamp = parseInt(rowDate.replace(/[^0-9]/g, ''));
                        let date = new Date(timestamp);
                        let formattedDate = date.toLocaleDateString("en-GB", {
                            day: "2-digit",
                            month: "2-digit",
                            year: "numeric"
                        });
                        $("#vAddedDate").val(formattedDate);

                        $("#viewRowModal").modal("show");
                    } else {
                        Swal.fire("Error", "Row details not found", "error");
                    }
                },
                error: function () {
                    Swal.fire("Error", "Server error while fetching row details", "error");
                }
            });
        });

        $(document).on("click", ".editRow", function () {
            var rowId = $(this).data("id");

            $.ajax({
                url: "/Inventory/GetRowByIdSSK",
                type: "GET",
                data: { rowId: rowId },
                success: function (res) {
                    if (res) {
                        $("#rowModal").modal("show");

                        $("#RowId").val(res.RowId);
                        $("#RowCode").val(res.RowCode);
                        $("#rowName").val(res.RowName);
                        $("#Descriptions").val(res.Description);

                        loadWarehousess(res.WarehouseCode, res.SectionCode, res.RackCode);
                    } else {
                        Swal.fire("Error", "Row data not found", "error");
                    }
                },
                error: function () {
                    Swal.fire("Error", "Server error while fetching row", "error");
                }
            });
        });

        function loadWarehousess(selectedWarehouse, selectedSection, selectedRack) {
            $.ajax({
                url: '@Url.Action("GetWarehousesListSK", "Inventory")',
                type: 'GET',
                success: function (data) {
                    let $ddl = $("#warehouseDropdown");
                    $ddl.empty().append('<option value="">-- Select Warehouse --</option>');
                    $.each(data, function (i, item) {
                        $ddl.append('<option value="' + item.WarehouseCode + '">' + item.WarehouseName + '</option>');
                    });

                    if (selectedWarehouse) {
                        $ddl.val(selectedWarehouse).trigger('change');
                        loadSections(selectedWarehouse, selectedSection, selectedRack);
                    }
                }
            });
        }

        function loadSections(warehouseCode, selectedSection, selectedRack) {
            if (!warehouseCode) return;

            $.ajax({
                url: '@Url.Action("GetSectionsSKK", "Inventory")',
                type: 'GET',
                data: { warehouseCode: warehouseCode },
                success: function (data) {
                    let $ddl = $("#sectionDropdown");
                    $ddl.empty().append('<option value="">-- Select Section --</option>');
                    $.each(data, function (i, item) {
                        $ddl.append('<option value="' + item.SectionCode + '">' + item.SectionName + '</option>');
                    });

                    if (selectedSection) {
                        $ddl.val(selectedSection).trigger('change');
                        loadRacks(selectedSection, selectedRack);
                    }
                }
            });
        }

        function loadRacks(sectionCode, selectedRack) {
            if (!sectionCode) return;

            $.ajax({
                url: '@Url.Action("GetRackss", "Inventory")',
                type: 'GET',
                data: { sectionCode: sectionCode },
                success: function (data) {
                    let $ddl = $("#rackDropdown");
                    $ddl.empty().append('<option value="">-- Select Rack --</option>');
                    $.each(data, function (i, item) {
                        $ddl.append('<option value="' + item.RackCodes + '">' + item.RackNames + '</option>');
                    });

                    if (selectedRack) {
                        $ddl.val(selectedRack);
                    }
                }
            });
        }

        function loadWarehouses() {
            $.ajax({
                url: '@Url.Action("GetWarehousesListSK", "Inventory")',
                type: 'GET',
                success: function (data) {
                    let $ddl = $("#warehouseDropdown");
                    $ddl.empty().append('<option value="">-- Select Warehouse --</option>');
                    $.each(data, function (i, item) {
                        $ddl.append('<option value="' + item.WarehouseCode + '">' + item.WarehouseName + '</option>');
                    });
                }
            });
        }

        $("#warehouseDropdown").change(function () {
            let warehouseId = $(this).val();
            if (warehouseId) {
                $.ajax({
                    url: '@Url.Action("GetSectionsSKK", "Inventory")',
                    type: 'GET',
                    data: { warehouseCode: warehouseId },
                    success: function (data) {
                        let $ddl = $("#sectionDropdown");
                        $ddl.empty().append('<option value="">-- Select Section --</option>');
                        $.each(data, function (i, item) {
                            $ddl.append('<option value="' + item.SectionCode + '">' + item.SectionName + '</option>');
                        });
                        $("#rackDropdown").empty().append('<option value="">-- Select Rack --</option>');
                    }
                });
            } else {
                $("#sectionDropdown").empty().append('<option value="">-- Select Section --</option>');
                $("#rackDropdown").empty().append('<option value="">-- Select Rack --</option>');
            }
        });

        $("#sectionDropdown").change(function () {
            let sectionId = $(this).val();
            if (sectionId) {
                $.ajax({
                    url: '@Url.Action("GetRackss", "Inventory")',
                    type: 'GET',
                    data: { sectionCode: sectionId },
                    success: function (data) {
                        let $ddl = $("#rackDropdown");
                        $ddl.empty().append('<option value="">-- Select Rack --</option>');
                        $.each(data, function (i, item) {
                            $ddl.append('<option value="' + item.RackCodes + '">' + item.RackNames + '</option>');
                        });
                    }
                });
            } else {
                $("#rackDropdown").empty().append('<option value="">-- Select Rack --</option>');
            }
        });

        $(document).on('change', '#selectAll', function () {
            let isChecked = $(this).prop('checked');
            $('#rowTable tbody .rowCheckbox').prop('checked', isChecked).trigger('change');
        });

        $(document).on('change', '#rowTable tbody .rowCheckbox', function () {
            let rowId = $(this).val();
            if ($(this).prop('checked')) {
                selectedRowIds.add(rowId);
            } else {
                selectedRowIds.delete(rowId);
            }

            let total = $('#rowTable tbody .rowCheckbox').length;
            let checked = $('#rowTable tbody .rowCheckbox:checked').length;
            $('#selectAll').prop('checked', total > 0 && total === checked);
        });

        $('#rowTable').on('draw.dt', function () {
            $('#selectAll').prop('checked', false);
            selectedRowIds.clear();
        });

        $('#rowTable').on('click', '.deleteRow', function () {
            var id = $(this).data("id");

            Swal.fire({
                title: "Are you sure?",
                text: "This Row will be permanently deleted!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Yes, delete it!"
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: "/Inventory/DeleteRowSK",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify({ rowId: id }),
                        success: function (res) {
                            if (res.success) {
                                $('#rowTable').DataTable().ajax.reload();

                                Swal.fire({
                                    title: "Deleted!",
                                    text: res.message,
                                    icon: "success",
                                    timer: 2000,
                                    showConfirmButton: false
                                });
                            } else {
                                Swal.fire({
                                    title: "Error",
                                    text: res.message,
                                    icon: "error",
                                    timer: 2500,
                                    showConfirmButton: false
                                });
                            }
                        },
                        error: function () {
                            Swal.fire({
                                title: "Error",
                                text: "Something went wrong while deleting Row.",
                                icon: "error",
                                timer: 2500,
                                showConfirmButton: false
                            });
                        }
                    });
                }
            });
        });

        function initTooltips() {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        }

        initTooltips();

        $('#rowTable').on('draw.dt', function () {
            initTooltips();
        });
    });
</script>













