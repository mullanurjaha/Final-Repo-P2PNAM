<div class="d-flex justify-content-between align-items-center mb-3">

    <div class="flex-grow-1 text-center">
        <h4 class="mb-0 text-primary">Warehouse List</h4>
    </div>

    <button class="btn btn-success" id="btnAddWarehouse">
        <i class="bi bi-plus-circle"></i> Add Warehouse
    </button>

</div>

<!-- Responsive wrapper -->
<div class="table-responsive">
    <table id="warehouseTable" class="table table-bordered table-hover align-middle w-100">
        <thead class="table-dark text-center">
            <tr>
                <th><input type="checkbox" id="WHselectAll"></th>
                <th>Sr No.</th>
                <th>Warehouse ID</th>
                <th>Warehouse Code</th>
                <th>Warehouse Name</th>
                <th>Address</th>
                <th>City</th>
                <th>Added Date</th>
                <th>Added By</th>
                <th>Phone</th>
                <th>Email</th>
                <th>Description</th>
                <th>Capacity</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody class="text-center"></tbody>
    </table>
</div>

<!-- Add/Edit Warehouse Modal -->
<div class="modal fade" id="addWarehouseModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <!-- Header -->
            <div class="modal-header bg-primary text-white position-relative">
                <h5 class="modal-title text-white w-100 text-center" id="warehouseModalTitle">Add Warehouse</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>

            <!-- Body -->
            <div class="modal-body">
                <form id="addWarehouseForm" class="row g-3">
                    <!-- Warehouse Code -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-barcode-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="WarehouseCode" name="WarehouseCode" readonly>
                                <label for="WarehouseCode">Warehouse Code</label>
                            </div>
                        </div>
                    </div>

                    <!-- Warehouse Name -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-building-4-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" name="WarehouseName" required>
                                <label for="WarehouseName">Warehouse Name</label>
                            </div>
                        </div>
                    </div>

                    <!-- Address -->
                    <div class="col-12">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-map-pin-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" name="Address" required>
                                <label for="Address">Address</label>
                            </div>
                        </div>
                    </div>

                    <!-- Country -->
                    <div class="col-md-4">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-earth-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <select class="form-select" id="CountryId" name="CountryCode" required>
                                    <option value="">-- Select Country --</option>
                                </select>
                                <label for="CountryId">Country</label>
                            </div>
                        </div>
                    </div>

                    <!-- State -->
                    <div class="col-md-4">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-government-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <select class="form-select" id="StateId" name="StateCode" required>
                                    <option value="">-- Select State --</option>
                                </select>
                                <label for="StateId">State</label>
                            </div>
                        </div>
                    </div>

                    <!-- City -->
                    <div class="col-md-4">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-building-fill"></i></span>
                            <div class="form-floating form-floating-outline">
                                <select class="form-select" id="CityId" name="CityId" required>
                                    <option value="">-- Select City --</option>
                                </select>
                                <label for="CityId">City</label>
                            </div>
                        </div>
                    </div>

                    <!-- Phone -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-phone-fill"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="tel" class="form-control" name="Phone" required pattern="[0-9]{10}" placeholder="Enter 10-digit phone">
                                <label for="Phone">Phone</label>
                            </div>
                        </div>
                    </div>

                    <!-- Email -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-mail-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="email" class="form-control" name="Email" required>
                                <label for="Email">Email</label>
                            </div>
                        </div>
                    </div>

                    <!-- Description -->
                    <div class="col-12">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-file-text-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <textarea class="form-control" name="Description" rows="3" required></textarea>
                                <label for="Description">Description</label>
                            </div>
                        </div>
                    </div>

                    <!-- Capacity -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-archive-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="number" class="form-control" name="Capacity" required>
                                <label for="Capacity">Capacity</label>
                            </div>
                        </div>
                    </div>

                </form>
            </div>

            <!-- Footer -->
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-danger bg-danger text-white px-4" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle  me-2"></i>Close
                </button>
                <button type="submit" form="addWarehouseForm" class="btn btn-success px-4" id="warehouseModalSubmitBtn">
                    <i class="bi bi-check-circle me-2 text-white"></i>Save
                </button>
            </div>
        </div>
    </div>
</div>

<!-- View Warehouse Modal -->
<div class="modal fade" id="viewWarehouseModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <!-- Header -->
            <div class="modal-header bg-primary text-white position-relative">
                <h5 class="modal-title text-white w-100 text-center">Warehouse Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>

            <!-- Body -->
            <div class="modal-body">
                <form class="row g-3">
                    <!-- Warehouse Code -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-barcode-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vwCode" readonly>
                                <label for="vwCode">Warehouse Code</label>
                            </div>
                        </div>
                    </div>

                    <!-- Warehouse Name -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-building-4-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vwName" readonly>
                                <label for="vwName">Warehouse Name</label>
                            </div>
                        </div>
                    </div>

                    <!-- Address -->
                    <div class="col-12">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-map-pin-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <textarea class="form-control" id="vwAddress" rows="2" readonly></textarea>
                                <label for="vwAddress">Address</label>
                            </div>
                        </div>
                    </div>

                    <!-- City -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-building-fill"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vwCity" readonly>
                                <label for="vwCity">City</label>
                            </div>
                        </div>
                    </div>

                    <!-- Phone -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-phone-fill"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vwPhone" readonly>
                                <label for="vwPhone">Phone</label>
                            </div>
                        </div>
                    </div>

                    <!-- Email -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-mail-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vwEmail" readonly>
                                <label for="vwEmail">Email</label>
                            </div>
                        </div>
                    </div>

                    <!-- Capacity -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-archive-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vwCapacity" readonly>
                                <label for="vwCapacity">Capacity</label>
                            </div>
                        </div>
                    </div>

                    <!-- Description -->
                    <div class="col-12">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-file-text-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <textarea class="form-control" id="vwDesc" rows="2" readonly></textarea>
                                <label for="vwDesc">Description</label>
                            </div>
                        </div>
                    </div>

                    <!-- Added Date -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-calendar-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vwAddedDates" readonly>
                                <label for="vwAddedDates">Added Date</label>
                            </div>
                        </div>
                    </div>

                    <!-- Added By -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-user-3-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vwAddedBy" readonly>
                                <label for="vwAddedBy">Added By</label>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {


        // Initialize variables
        let selectedWarehouseIds = new Set();
        let cityMap = new Map();

        // Initialize tooltips
        function initTooltips() {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl, {
                    trigger: 'hover'
                });
            });
        }


        $("#CountryId").on("change", function () {
            var countryId = $(this).val();
            if (!countryId) {
                $("#StateId, #CityId").empty().append('<option value="">-- Select --</option>');
                return;
            }
        });

        // Load State data based on country selection
        $('#CountryId').change(function () {
            var countrycode = $(this).val();

            $.getJSON('@Url.Action("GetStates","Account")', { CountryCode: countrycode }, function (lststate) {
                console.log("State Data", lststate);
                $('#StateId').empty().append(`<option value="">Select State</option>`);
                $.each(lststate, function (i, state) {
                    $('#StateId').append(`<option value=${state.Iso2}>${state.Name}</option>`);
                });
            });
        });

        // Load City data based on state selection
        $('#StateId').change(function () {
            var countryCode = $('#CountryId').val();
            var stateCode = $(this).val();
            console.log("Country: " + countryCode + ", State: " + stateCode);

            $.getJSON('@Url.Action("GetCities", "Account")', { countryCode: countryCode, stateCode: stateCode }, function (data) {
                console.log("City Data", data);
                $('#CityId').empty().append('<option>Select City</option>');
                $.each(data, function (i, city) {
                    $('#CityId').append('<option value="' + city.Id + '">' + city.Name + '</option>');
                });
            });
        });

        // ================= Initialize DataTable =================
        var table = $('#warehouseTable').DataTable({
            dom: '<"d-flex justify-content-between align-items-center mt-1 mb-2"Bf>rt<"d-flex justify-content-between mt-2"<"datatable-info"i><"datatable-pagination"p>>',
            ajax: {
                url: '/Inventory/GetWarehousesSK',
                type: 'GET',
                dataSrc: 'data'
            },
            columns: [
                {
                    data: "WareHouseId",
                    render: function (data, type, row) {
                        if (type === 'display') {
                            return `<input type="checkbox" class="row-select" value="${data}" />`;
                        }
                        return data;
                    }
                },
                {
                    data: null,
                    render: function (data, type, row, meta) {

                        if (type === 'display') {
                            return meta.row + 1;
                        }

                        return '';
                    }
                },
                { data: "WareHouseId", visible: false },
                { data: "WarehouseCode", visible: false },
                { data: "WarehouseName" },
                { data: "Address" },
                {
                    data: null,
                    render: function (data, type, row) {
                        const cityKey = `${row.CountryCode}_${row.StateCode}_${row.CityId}`;

                        if (type === 'export') {

                            return cityMap.get(cityKey) || "N/A";
                        }


                        return `<span class="city-name" data-country="${row.CountryCode}" data-state="${row.StateCode}" data-cityid="${row.CityId}" data-warehouse="${row.WareHouseId}">Loading...</span>`;
                    }
                },
                {
                    "data": "AddedDate",
                    "render": function (data, type, row) {
                        if (!data) return "";


                        var match = /Date\((\d+)\)/.exec(data);
                        if (match) {
                            var dt = new Date(parseInt(match[1], 10));
                            return dt.toLocaleDateString("en-GB");
                        }


                        var dt2 = new Date(data);
                        if (!isNaN(dt2.getTime())) {
                            return dt2.toLocaleDateString("en-GB");
                        }

                        return data;
                    }
                },
                { data: "AddedBy" },
                { data: "Phone" },
                { data: "Email" },
                {
                    data: "Description",
                    visible: false,
                    render: function (data, type, row) {
                        if (!data) return "";

                        if (type === "display") {
                            if (data.length > 30) {
                                return `<span class="description-tooltip" data-bs-toggle="tooltip" data-bs-placement="top" title="${data.replace(/"/g, '&quot;')}">${data.substr(0, 30)}...</span>`;
                            } else {
                                return `<span class="description-tooltip" data-bs-toggle="tooltip" data-bs-placement="top" title="${data.replace(/"/g, '&quot;')}">${data}</span>`;
                            }
                        }
                        return data;
                    }
                },
                { data: "Capacity" },
                {
                    data: "WareHouseId",
                    render: function (data, type, row) {
                        if (type === 'display') {
                            return `
                                <div class="d-flex justify-content-center gap-1">
                                    <button class="btn btn-sm btn-primary btn-view" data-id="${data}" data-bs-toggle="tooltip" title="View Warehouse">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                    <button class="btn btn-sm btn-warning btn-edit" data-id="${data}" data-bs-toggle="tooltip" title="Edit Warehouse">
                                        <i class="bi bi-pencil-square"></i>
                                    </button>
                                    <button class="btn btn-sm btn-danger btn-delete" data-id="${data}" data-bs-toggle="tooltip" title="Delete Warehouse">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            `;
                        }
                        return data;
                    }
                }
            ],
            columnDefs: [
                { orderable: false, targets: "_all" }
            ],
            buttons: [
                // --- Print ---
                {
                    extend: 'print',
                    text: '<i class="bi bi-printer-fill text-dark fs-5" data-bs-toggle="tooltip" title="Print"></i>',
                    title: '',
                    exportOptions: {
                        columns: ':visible:not(:first-child):not(:last-child):not(:nth-child(5))',
                        rows: function (idx, data, node) {
                            return selectedWarehouseIds.has(data.WareHouseId);
                        },
                        format: {
                            body: function (data, row, column, node) {

                                if (column === 1) {

                                    if (!this.serialCounter) {
                                        this.serialCounter = 1;
                                    }
                                    var serial = this.serialCounter;
                                    this.serialCounter++;
                                    return serial.toString();
                                }

                                // City column is now excluded, so no need for special handling
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        if (selectedWarehouseIds.size === 0) {
                            toastr.warning("Please select at least one warehouse before printing.", "No Selection");
                            return;
                        }
                        $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                    },
                    customize: function (win) {

                        $(win.document.body).prepend(
                            '<h2 style="text-align: center; margin-bottom: 10px;">Warehouse List</h2>' +
                            '<p style="text-align: center; margin-bottom: 20px; color: #666;">Generated on: ' + new Date().toLocaleDateString("en-GB") + '</p>' +
                            '<hr style="margin-bottom: 20px;">'
                        );

                        // Table styling
                        $(win.document.body).find('table')
                            .css('border', '1px solid black')
                            .css('border-collapse', 'collapse')
                            .css('width', '100%')
                            .find('th, td')
                            .css('border', '1px solid black')
                            .css('padding', '8px')
                            .css('text-align', 'center');

                        $(win.document.body).find('th')
                            .css('background-color', 'black')
                            .css('color', 'white')
                            .css('font-weight', 'bold');
                    }
                },

                // --- PDF ---
                {
                    extend: 'pdfHtml5',
                    text: '<i class="bi bi-file-earmark-pdf text-danger fs-5" data-bs-toggle="tooltip" title="Export PDF"></i>',
                    title: '',
                    exportOptions: {
                        columns: ':visible:not(:first-child):not(:last-child):not(:nth-child(5))',
                        rows: function (idx, data, node) {
                            return selectedWarehouseIds.has(data.WareHouseId);
                        },
                        format: {
                            body: function (data, row, column, node) {

                                if (column === 1) {

                                    if (!this.serialCounter) {
                                        this.serialCounter = 1;
                                    }
                                    var serial = this.serialCounter;
                                    this.serialCounter++;
                                    return serial.toString();
                                }

                                // City column is now excluded, so no need for special handling
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        if (selectedWarehouseIds.size === 0) {
                            toastr.warning("Please select at least one warehouse before exporting.", "No Selection");
                            return;
                        }
                        $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                    },
                    customize: function (doc) {

                        doc.content.splice(0, 0, {
                            text: 'Warehouse List',
                            alignment: 'center',
                            fontSize: 16,
                            bold: true,
                            margin: [0, 0, 0, 10]
                        });

                        doc.content.splice(1, 0, {
                            text: 'Generated on: ' + new Date().toLocaleDateString("en-GB"),
                            alignment: 'center',
                            margin: [0, 0, 0, 15]
                        });

                        doc.styles.tableHeader.fillColor = 'black';
                        doc.styles.tableHeader.color = 'white';
                        doc.styles.tableHeader.alignment = 'center';
                        doc.styles.tableHeader.bold = true;

                        var objLayout = {};
                        objLayout['hLineWidth'] = function (i) { return 0.5; };
                        objLayout['vLineWidth'] = function (i) { return 0.5; };
                        objLayout['hLineColor'] = function (i) { return '#000000'; };
                        objLayout['vLineColor'] = function (i) { return '#000000'; };
                        objLayout['paddingLeft'] = function (i) { return 5; };
                        objLayout['paddingRight'] = function (i) { return 5; };
                        doc.content[2].layout = objLayout;
                    }
                },
                // --- Excel ---
                {
                    extend: 'excelHtml5',
                    text: '<i class="bi bi-file-earmark-excel text-success fs-5" data-bs-toggle="tooltip" title="Export Excel"></i>',
                    title: 'Warehouse List',
                    message: 'Generated on: ' + new Date().toLocaleDateString("en-GB"),
                    exportOptions: {
                        columns: ':visible:not(:first-child):not(:last-child):not(:nth-child(5))',
                        rows: function (idx, data, node) {
                            return selectedWarehouseIds.has(data.WareHouseId);
                        },
                        format: {
                            body: function (data, row, column, node) {

                                if (column === 1) {

                                    if (!this.serialCounter) {
                                        this.serialCounter = 1;
                                    }
                                    var serial = this.serialCounter;
                                    this.serialCounter++;
                                    return serial.toString();
                                }

                                // City column is now excluded, so no need for special handling
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        if (selectedWarehouseIds.size === 0) {
                            toastr.warning("Please select at least one warehouse before exporting Excel.", "No Selection");
                            return;
                        }
                        $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                    }
                },
                // --- CSV ---
                {
                    extend: 'csvHtml5',
                    text: '<i class="bi bi-filetype-csv text-success fs-5" data-bs-toggle="tooltip" title="Export CSV"></i>',
                    title: 'Warehouse List',
                    message: 'Generated on: ' + new Date().toLocaleDateString("en-GB"),
                    exportOptions: {
                        columns: ':visible:not(:first-child):not(:last-child):not(:nth-child(5))',
                        rows: function (idx, data, node) {
                            return selectedWarehouseIds.has(data.WareHouseId);
                        },
                        format: {
                            body: function (data, row, column, node) {

                                if (column === 1) {

                                    if (!this.serialCounter) {
                                        this.serialCounter = 1;
                                    }
                                    var serial = this.serialCounter;
                                    this.serialCounter++;
                                    return serial.toString();
                                }


                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        if (selectedWarehouseIds.size === 0) {
                            toastr.warning("Please select at least one warehouse before exporting CSV.", "No Selection");
                            return;
                        }
                        $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                    }
                }
            ],
            "drawCallback": function (settings) {
                setTimeout(function() {
                    initTooltips();
                }, 100);
            },
            "initComplete": function (settings, json) {
                setTimeout(function() {
                    initTooltips();
                }, 100);
            }
        });

        // Load city data for all warehouses and update display
        function loadAllCityData() {
            $('#warehouseTable .city-name').each(function () {
                var span = $(this);
                var country = span.data('country');
                var state = span.data('state');
                var cityId = span.data('cityid');
                var warehouseId = span.data('warehouse');

                if (!country || !state || !cityId) {
                    span.text("N/A");
                    return;
                }

                const cityKey = `${country}_${state}_${cityId}`;


                if (cityMap.has(cityKey)) {
                    span.text(cityMap.get(cityKey));
                    return;
                }


                $.get("/Account/GetCities", { countryCode: country, stateCode: state, CityId: cityId }, function (city) {
                    if (city && city.Name) {
                        span.text(city.Name);

                        cityMap.set(cityKey, city.Name);
                    } else {
                        span.text("Unknown");
                        cityMap.set(cityKey, "Unknown");
                    }
                });
            });
        }

        $('#warehouseTable').on('draw.dt', function () {
            loadAllCityData();
            initTooltips();
        });


        loadAllCityData();

        //================= Checkbox Selection =================
        $("#WHselectAll").on("change", function () {
            $(".row-select").prop("checked", $(this).prop("checked")).trigger("change");
        });

        $(document).on("change", ".row-select", function () {
            let id = parseInt($(this).val());
            if ($(this).prop("checked")) {
                selectedWarehouseIds.add(id);
            } else {
                selectedWarehouseIds.delete(id);
                $("#WHselectAll").prop("checked", false);
            }
        });

        // ================= Add Date Range Picker Above Table =================
        $('#warehouseTable_wrapper').prepend(`
            <div class="input-group mb-2 mt-2" style="max-width: 300px;">
                <span class="input-group-text bg-primary text-white">
                    <i class="bi bi-calendar-date"></i>
                </span>
                <input type="text" id="warehouseDateRange" class="form-control" placeholder="Select date range" readonly />
            </div>
        `);

        $('#warehouseDateRange').daterangepicker({
            autoUpdateInput: false,
            locale: { cancelLabel: 'Clear' },
            ranges: {
                'Today': [moment(), moment()],
                'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                'This Month': [moment().startOf('month'), moment().endOf('month')],
                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
            }
        });

        // Custom filter
        $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
            if (settings.nTable.id !== "warehouseTable") return true;

            var dateRange = $('#warehouseDateRange').val();
            if (!dateRange) return true;

            var minMax = dateRange.split(' to ');
            var min = moment(minMax[0], 'YYYY-MM-DD');
            var max = moment(minMax[1], 'YYYY-MM-DD');


            var dateParts = data[7].split('/');
            var date = moment(`${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`, 'YYYY-MM-DD');

            return date.isBetween(min, max, 'day', '[]');
        });

        // Apply filter on selection
        $('#warehouseDateRange').on('apply.daterangepicker', function (ev, picker) {
            $(this).val(picker.startDate.format('YYYY-MM-DD') + ' to ' + picker.endDate.format('YYYY-MM-DD'));
            table.draw();
        });

        // Clear filter
        $('#warehouseDateRange').on('cancel.daterangepicker', function () {
            $(this).val('');
            table.draw();
        });

        // ================= Add Warehouse Modal =================
        $("#btnAddWarehouse").on("click", function () {
            $("#addWarehouseForm")[0].reset();


            $("#WareHouseId").remove();


            $("#warehouseModalTitle").text("Add Warehouse");
            $("#warehouseModalSubmitBtn").html('<i class="bi bi-check-circle me-2 text-white"></i>Save');

            // Get next Warehouse code
            $.get("/Inventory/GetNextWarehouseCodeSK", function (res) {
                if (res.success) {
                    $("#WarehouseCode").val(res.code);
                } else {
                    Swal.fire("Error", res.message, "error");
                }
            });

                  // Load Country data
$.getJSON('@Url.Action("GetCountries", "Purchase")', function (countrieslst) {
    console.log("Country Data", countrieslst);
    $('#CountryId').empty().append('<option value="">Select Country</option>');
    $.each(countrieslst, function (i, country) {
        $('#CountryId').append(`<option value="${country.iso2}">${country.name}</option>`);
    });
});

            $("#addWarehouseModal").modal("show");
        });

        // ================= Country → State → City =================
        $("#StateId").on("change", function () {
            var countryId = $('#CountryId').val();
            console.log(countryId);
            var stateId = $(this).val();
            if (!stateId) {
                $("#CityId").empty().append('<option value="">-- Select City --</option>');
                return;
            }
            $.get("/Account/GetCities", { CountryCode: countryId, stateCode: stateId }, function (data) {

                if (typeof data === "string") {
                    data = JSON.parse(data);
                }

                var $city = $("#CityId");
                $city.empty().append('<option value="">-- Select City --</option>');

                $.each(data, function (i, item) {
                    $city.append('<option value="' + item.Id + '">' + item.Name + '</option>');
                });
            });
        });

        // ================= Form Submit =================
        $("#addWarehouseForm").on("submit", function (e) {
            e.preventDefault();
            var formData = $(this).serialize();

            var url = $("#WareHouseId").length > 0 ? "/Inventory/UpdateWarehouseSK" : "/Inventory/AddWarehouseSK";

            $.ajax({
                url: url,
                type: 'POST',
                data: formData,
                success: function (res) {
                    if (res.success) {
                        $("#addWarehouseModal").modal("hide");
                        $('#warehouseTable').DataTable().ajax.reload(null, false);
                        Swal.fire({
                            title: "Success",
                            text: res.message,
                            icon: "success",
                            showConfirmButton: false,
                            timer: 2000
                        });
                    } else {
                        Swal.fire({
                            title: "Error",
                            text: res.message,
                            icon: "error",
                            confirmButtonText: "OK"
                        });
                    }
                },
                error: function () {
                    Swal.fire({
                        title: "Error",
                        text: "Something went wrong!",
                        icon: "error",
                        confirmButtonText: "OK"
                    });
                }
            });
        });

        // ================= Delete =================
        $(document).on("click", ".btn-delete", function () {
            var id = $(this).data("id");
            const swalWithBootstrapButtons = Swal.mixin({
                customClass: {
                    confirmButton: "btn btn-success me-2",
                    cancelButton: "btn btn-danger"
                },
                buttonsStyling: false
            });

            swalWithBootstrapButtons.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes, delete it!",
                cancelButtonText: "No, cancel!",
                reverseButtons: true,
                timer: 10000,
                showCloseButton: true
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/Inventory/DeleteWarehouseSK',
                        type: 'POST',
                        data: { id: id },
                        success: function (res) {
                            if (res.success) {
                                swalWithBootstrapButtons.fire({
                                    title: "Deleted!",
                                    text: res.message,
                                    icon: "success",
                                    showConfirmButton: false,
                                    timer: 3000
                                });
                                table.ajax.reload(null, false);
                            } else {
                                swalWithBootstrapButtons.fire({
                                    title: "Error!",
                                    text: res.message,
                                    icon: "error",
                                    timer: 4000
                                });
                            }
                        },
                        error: function () {
                            swalWithBootstrapButtons.fire({
                                title: "Error!",
                                text: "Something went wrong while deleting.",
                                icon: "error",
                                timer: 4000
                            });
                        }
                    });
                } else if (result.dismiss === Swal.DismissReason.cancel) {
                    swalWithBootstrapButtons.fire({
                        title: "Cancelled",
                        text: "Your warehouse record is safe",
                        icon: "error",
                        timer: 3000
                    });
                } else if (result.dismiss === Swal.DismissReason.timer) {
                    swalWithBootstrapButtons.fire({
                        title: "Timeout",
                        text: "Delete action was not confirmed in time",
                        icon: "info",
                        timer: 3000
                    });
                }
            });
        });
        // ================= View Warehouse =================
        $(document).on("click", ".btn-view", function () {
            var id = $(this).data("id");

            $.get("/Inventory/ViewWarehouseSK", { id: id }, function (res) {
                if (res.success) {
                    var data = res.data;

                    $("#vwCode").val(data.WarehouseCode);
                    $("#vwName").val(data.WarehouseName);
                    $("#vwAddress").val(data.Address);

                    if (data.CountryCode && data.StateCode && data.CityId) {
                        $.get("/Account/GetCities",
                            {
                                countryCode: data.CountryCode,
                                stateCode: data.StateCode,
                                CityId: data.CityId
                            },
                            function (cityRes) {
                                if (cityRes && cityRes.Name) {
                                    $("#vwCity").val(cityRes.Name);
                                } else {
                                    $("#vwCity").val("N/A");
                                }
                            }
                        );
                    } else {
                        $("#vwCity").val("N/A");
                    }

                    $("#vwPhone").val(data.Phone);
                    $("#vwEmail").val(data.Email);
                    $("#vwCapacity").val(data.Capacity);
                    $("#vwDesc").val(data.Description);


                    let formattedDate = "";
                    if (data.AddedDate) {

                        var match = /\/Date\((\d+)\)\//.exec(data.AddedDate);
                        if (match) {
                            var d = new Date(parseInt(match[1]));
                            formattedDate = d.toLocaleDateString("en-GB", {
                                day: "2-digit",
                                month: "2-digit",
                                year: "numeric"
                            });
                        } else {

                            var d2 = new Date(data.AddedDate);
                            if (!isNaN(d2.getTime())) {
                                formattedDate = d2.toLocaleDateString("en-GB", {
                                    day: "2-digit",
                                    month: "2-digit",
                                    year: "numeric"
                                });
                            }
                        }
                    }
                    $("#vwAddedDates").val(formattedDate || "N/A");

                    $("#vwAddedBy").val(data.AddedBy);
                    $("#viewWarehouseModal").modal("show");
                } else {
                    Swal.fire("Error", res.message, "error");
                }
            });
        });

        // ================= Edit =================
        $(document).on("click", ".btn-edit", function () {
            var id = $(this).data("id");

            $.get("/Inventory/ViewWarehouseSK", { id: id }, function (res) {
                if (res.success) {
                    var d = res.data;


                    $("#WarehouseCode").val(d.WarehouseCode);
                    $("input[name='WarehouseName']").val(d.WarehouseName);
                    $("input[name='Address']").val(d.Address);
                    $("input[name='Phone']").val(d.Phone);
                    $("input[name='Email']").val(d.Email);
                    $("textarea[name='Description']").val(d.Description);
                    $("input[name='Capacity']").val(d.Capacity);


                    if ($("#WareHouseId").length === 0) {
                        $("<input>").attr({
                            type: "hidden",
                            id: "WareHouseId",
                            name: "WareHouseId",
                            value: d.WareHouseId
                        }).appendTo("#addWarehouseForm");
                    } else {
                        $("#WareHouseId").val(d.WareHouseId);
                    }


                    $("#warehouseModalTitle").text("Update Warehouse");
                    $("#warehouseModalSubmitBtn").html('<i class="bi bi-check-circle me-2 text-white"></i>Update');


                    $.get("/Account/GetCountries", function (countries) {
                        $("#CountryId").empty().append('<option value="">-- Select Country --</option>');
                        $.each(countries, function (i, c) {
                            $("#CountryId").append('<option value="' + c.Iso2 + '">' + c.Name + '</option>');
                        });


                        $("#CountryId").val(d.CountryCode);


                        $.get("/Account/GetStates", { CountryCode: d.CountryCode }, function (states) {
                            $("#StateId").empty().append('<option value="">-- Select State --</option>');
                            $.each(states, function (i, s) {
                                $("#StateId").append('<option value="' + s.Iso2 + '">' + s.Name + '</option>');
                            });


                            $("#StateId").val(d.StateCode);


                            $.get("/Account/GetCities", { CountryCode: d.CountryCode, stateCode: d.StateCode }, function (cities) {
                                $("#CityId").empty().append('<option value="">-- Select City --</option>');
                                $.each(cities, function (i, city) {
                                    $("#CityId").append('<option value="' + city.Id + '">' + city.Name + '</option>');
                                });


                                $("#CityId").val(d.CityId);
                            });
                        });
                    });

                    $("#addWarehouseModal").modal("show");
                } else {
                    Swal.fire("Error", res.message, "error");
                }
            });
        });

        // Initial tooltip initialization
        setTimeout(function() {
            initTooltips();
        }, 500);
    });
</script>